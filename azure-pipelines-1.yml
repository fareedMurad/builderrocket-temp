trigger:
- staging

pool:
  vmImage: 'ubuntu-latest'

variables:
  majorVersion: 1
  minorVersion: 0
  patchVersion: $[counter(format('{0}.{1}', variables['majorVersion'], variables['minorVersion']), 0)]

steps:
- checkout: self
  persistCredentials: true
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm install -g typescript
  displayName: 'npm install'
  
- script: |
        BranchName="$(Build.SourceBranch)" -replace "refs/heads/"
        git config --global user.email "dev.doublemwebsolutions@gmail.com"
        git config --global user.name "Azure Pipeline"
        # git checkout $BranchName
        # git add . 
        # git commit -m "Clean git status"
        # echo "Increase version from: $(majorVersion).$(minorVersion).$(patchVersion)"
        # npm version $(majorVersion).$(minorVersion).$(patchVersion)
        nVersion="$(majorVersion).$(minorVersion).$(patchVersion)"
        echo "To: $nVersion"
        echo "New Version: v$nVersion"
        # Get package name and version from package.json file
        package_name=$(jq -r ".name" package.json)
        package_version=$(jq -r ".version" package.json)
        echo "Package Name: $package_name, v: $package_version, nV: $nVersion"
        # next, let's get all available versions for our package
        
        # if we find out that the version we're trying to publish already exists in the feed, then let's increment patch version for that package and publish
        echo Replacing \"version\": \"$package_version\" with \"version\": \"$nVersion\" in local package.json
        sed -i 's/"version": "'${package_version}'"/"version": "'${nVersion}'"/' package.json
        echo new package.json version: $(jq -r ".version" package.json)
        git add . 
        git commit -m "Bump version to $nVersion"
        git push
  displayName: 'increase version & push tag'
