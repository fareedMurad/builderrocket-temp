trigger:
  branches:
    include:
      - staging
  tags:
    exclude:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  majorVersion: 1
  minorVersion: 0
  patchVersion: $[counter(format('{0}.{1}', variables['majorVersion'], variables['minorVersion']), 0)]

steps:
- checkout: self
  persistCredentials: true
  clean: true
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
    npm install -g typescript
    echo "Installing env-cmd..."
    npm install -g env-cmd
  displayName: 'npm install'
  
- script: |
        git fetch --all
        branchName=$(Build.SourceBranchName)
        sanitizedBranchName=$(echo $branchName | sed 's/refs\/heads\///')
        git switch $sanitizedBranchName
        git config --global user.email "dev.doublemwebsolutions@gmail.com"
        git config --global user.name "Azure Pipeline"
        echo "Increase version from: $(majorVersion).$(minorVersion).$(patchVersion)"
        npm version $(majorVersion).$(minorVersion).$(patchVersion)
        nVersion="$(majorVersion).$(minorVersion).$(patchVersion)"
        echo "To: $nVersion"
        git tag -a v$nVersion -m "Version $nVersion"
        git push origin --tags
  displayName: 'increase version & push tag'
  
- script: |
      echo "Building the React app..."
      npm run build
  displayName: 'Building the app'
  
- task: FtpUpload@2
  inputs:
    credentialsOption: 'inputs'
    serverUrl: $(FTP_SERVER)
    username: $(FTP_USERNAME)
    password: $(FTP_PASSWORD)
    rootDirectory: './build'
    filePatterns: '**'
    remoteDirectory: '/Staging/Beta/'
    clean: false
    cleanContents: true
    preservePaths: true
    trustSSL: true
  displayName: 'Uploading to the FTP'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/build'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(zipFileName)'
  displayName: 'Create build.zip'

- task: FtpUpload@2
  inputs:
    credentialsOption: 'inputs'
    serverUrl: $(FTP_SERVER)
    username: $(FTP_USERNAME)
    password: $(FTP_PASSWORD)
    rootDirectory: '$(Build.ArtifactStagingDirectory)'
    filePatterns: '$(zipFileName)'
    remoteDirectory: '/Staging/BetaDeploy/'
    clean: false
    cleanContents: true
    preservePaths: true
    trustSSL: true
  displayName: 'Upload build.zip to FTP'

- task: FtpUpload@2
  inputs:
    credentialsOption: 'inputs'
    serverUrl: $(FTP_SERVER)
    username: $(FTP_USERNAME)
    password: $(FTP_PASSWORD)
    rootDirectory: '$(Build.ArtifactStagingDirectory)'
    filePatterns: '**/*.zip'
    remoteDirectory: '/Staging/BetaDeploy/'
    clean: false
    cleanContents: false
    preservePaths: true
    trustSSL: true
    operation: 'unzip'
  displayName: 'Unzip build.zip on FTP'